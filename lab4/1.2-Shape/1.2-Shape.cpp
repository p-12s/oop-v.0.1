#include "stdafx.h"
#include "ReadShape.h"

using namespace std;

int main(int argc, char* argv[])
{
	if (argc != 2)
	{
		cout << "Invalid arguments count\n"
			<< "Usage: program.exe <file with shapes>\n";
		return 1;
	}
	// Is/Has обычно не выполняют действий, а проверяют некоторое условие
	// лучше бросать std::runtime_error 
	// Имя, содержащее Try* обычно подразумевает, что вместо исключения вернут bool или иной код возврата, который надо проверить. Без try - подразумевает выброс исключения в случае неудачи
	try
	{
		/*shared_ptr основывается на подсчете количества ссылок на объект 
		 и может использоваться в составе контейнеров STL
		boost::scoped_ptr и boost::shared_ptr 
		Первый используется для контроля времени жизни указателя в пределах операторного блока. 
		Второй – для длительного контроля за указателем.
		*/
		vector<shared_ptr<IShape>> shapes;
		ReadShapes(argv[1], shapes);

		// пока не конец строки - будет считывать и с помощью bind создавать фигуры

		// загрузить фигуры из файла с указанным именем
		// Попытаться найти наибольшую площадь, сообщить об ошибке, если невозможно
		// Попытаться найти наименьший периметр
		// вывести результат

	}
	catch (const exception& error)
	{
		cout << error.what();
		return 1;
	}
	/*
	В программе должна быть функция, позволяющая найти среди массива фигур ту, которая имеет 
	наибольшую площадь, 
	а также функция, позволяющая найти фигуру, имеющую 
	наименьший периметр. 
	
	После окончания считывания фигур программа должна вывести в стандартный поток вывода информацию об этих двух фигурах. 
	При этом должна быть выведена полная информация, включающая в себя:
    • Площадь и периметр фигуры
    • Цвет обводки и заливки (при наличии)
    • Данные, специфичные для конкретной фигуры 
	(для этого удобно использовать ToString()) 
	 */
	
    return 0;
}

