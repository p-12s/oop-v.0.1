#include "stdafx.h"

using namespace std;

/*
Вариант №6 – radix – 100 баллов
Разработайте программу radix.exe, выполняющую перевод чисел из одной произвольной системы 
счисления в другую произвольную и запись результата в стандартный поток вывода. 
Под произвольной системой счисления понимается система с основанием от 2 до 36.

Системы счисления с 11-ричной до 36-ричной должны использовать заглавные буквы латинского
алфавита от A до Z для представления разрядов с 1010 до 3510. Формат командной строки приложения:
radix.exe <source notation> <destination notation> <value>

Например, следующим способом программа должна осуществлять 
перевод шестнадцатеричного числа 1F в его десятичное представление:
radix.exe 16 10 1F

В конце строки, выводимой в стандартный поток вывода должен располагаться код \n.

Программа должна быть способна осуществлять перевод как положительных,
так и отрицательных чисел, а также нуля. 

Особое внимание уделите 
переводу максимальных и минимальных целых чисел на данной платформе 
(они должны преобразовываться корректно).

Программа должна корректно обрабатывать ошибки
Внимание, для перевода строкового представления в числовое и числового в строковое 
в произвольных системах счисления должны быть разработаны функции:
int StringToInt(const string& str, int radix, bool & wasError);
и
std::string IntToString(int n, int radix, bool & wasError);
В случае ошибок (некорректные значения входных параметров, переполнение при переводе строки 
в число) данные функции должны изменять состояние булевой переменной wasError.

В случае обнаружения ошибки программа должна вывести соответствующее сообщение и 
корректно завершить свою работу.

В комплекте с программой должны обязательно поставляться файлы, позволяющие проверить 
ее работу в автоматическом режиме.
 */

int StringToInt(const string& str, int radix, bool& wasError)
{
	if (str.empty())
	{
		wasError = true;
	}
	return 1;
}

int main(int argc, char* argv[])
{
	if (argc != 4)
	{
		cout << "Invalid arguments count\n"
			<< "Usage: radix.exe <source notation> <destination notation> <value>\n";
		return 1;
	}
	
	bool wasError = false;



    return 0;
}

