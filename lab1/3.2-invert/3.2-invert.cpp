#include "stdafx.h"
#include <iomanip>

using namespace std;

namespace constants
{
	const unsigned MATRIX_SIZE = 3;
	const unsigned FLOAT_PRECISION = 3;
	const unsigned FIELD_DISPLAY_WIDTH = 8;
}

/*
–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ invert.exe, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã 3*3, 
—Ç.–µ. –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã 
–∏ –≤—ã–≤–æ–¥—è—â–µ–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞. 

+ –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
+ invert.exe <matrix file1>

+ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –∑–∞–¥–∞–Ω—ã –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ
+ (—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–π–ª matrix.txt –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏)  –≤ —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ 3 —ç–ª–µ–º–µ–Ω—Ç–∞.

+ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π –º–∞—Ç—Ä–∏—Ü—ã –≤—ã–≤–æ–¥—è—Ç—Å—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.

+ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü.

–í –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –¥–æ–ª–∂–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è —Ñ–∞–π–ª—ã, 
–ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ —Ä–∞–±–æ—Ç—É –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.
 */

typedef float(matrix)[constants::MATRIX_SIZE][constants::MATRIX_SIZE];

float ReadFloatNumberFromString(const string& str)
{
	float number = 0.0;
	try
	{
		number = stof(str);
	}
	catch (exception const&)
	{
		throw exception("Matrix value must be float number");
	}
	return number;
}

void ReadMatrix(istream& input, matrix& sourceMatrix)
{
	
	string matrixRowString, numberString;
	stringstream matrixRowStream;
	int rowIndex = 0;

	while (getline(input, matrixRowString))
	{
		if (rowIndex >= constants::MATRIX_SIZE)
		{
			throw exception("Matrix must have 3 rows");
		}
		matrixRowStream.clear();
		matrixRowStream.str(matrixRowString);
		
		int colIndex = 0;
		while(matrixRowStream >> numberString)
		{
			if (colIndex >= constants::MATRIX_SIZE)
			{
				throw exception("Matrix must have 3 columns!");
			}
			
			sourceMatrix[rowIndex][colIndex] = ReadFloatNumberFromString(numberString);
			++colIndex;
		}
		++rowIndex;
	}	

	if (rowIndex != 3)
	{
		throw exception("Matrix must have 3 rows!");
	}
}

void PrintMatrix(const matrix& sourceMatrix)
{
	cout << fixed << setprecision(constants::FLOAT_PRECISION);
	for (int i = 0; i < constants::MATRIX_SIZE; i++)
	{
		for (int j = 0; j < constants::MATRIX_SIZE; j++)
		{
			cout << setw(constants::FIELD_DISPLAY_WIDTH) << sourceMatrix[i][j];
		}
		cout << endl;
	}
}

float Get3x3MatrixDetermanant(const matrix& mx)
{
	return (mx[0][0] * mx[1][1] * mx[2][2]) + 
		(mx[0][1] * mx[1][2] * mx[2][0]) + 
		(mx[0][2] * mx[1][0] * mx[2][1]) -
		(mx[0][0] * mx[1][2] * mx[2][1]) - 
		(mx[0][1] * mx[1][0] * mx[2][2]) - 
		(mx[0][2] * mx[1][1] * mx[2][0]);
}

void SetOppositeIndicesForMatrix3x3(const int& index, int& oppositeIndex1, int& oppositeIndex2)
{
	switch (index)
	{
	case 0:
		oppositeIndex1 = 1;
		oppositeIndex2 = 2;
		break;
	case 1:
		oppositeIndex1 = 0;
		oppositeIndex2 = 2;
		break;
	case 2:
		oppositeIndex1 = 0;
		oppositeIndex2 = 1;
		break;
	default:
		throw exception("The cells of the matrix must have indices from 0 to 2");
	}
}

void TransposeMatrix3x3(matrix& mx)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = i; j < 3; j++)
		{
			swap(mx[i][j], mx[j][i]);
		}
	}
}

void GetAdjointMatrix3x3(const matrix& mx, matrix& algebraicComplementsOfMatrix)
{
	int oppRow1, oppRow2, oppCol1, oppCol2;
	for (int i = 0; i < constants::MATRIX_SIZE; i++)
	{
		for (int j = 0; j < constants::MATRIX_SIZE; j++)
		{
			SetOppositeIndicesForMatrix3x3(i, oppRow1, oppRow2);
			SetOppositeIndicesForMatrix3x3(j, oppCol1, oppCol2);
			algebraicComplementsOfMatrix[i][j] = pow((-1), (i + j)) * 
				((mx[oppRow1][oppCol1] * mx[oppRow2][oppCol2]) - 
				(mx[oppRow2][oppCol1] * mx[oppRow1][oppCol2]));
		}		
	}
}

void DivideMatrix3x3ByDeterminant(matrix& invertedMatrix, const float& determinant)
{
	for (int i = 0; i < constants::MATRIX_SIZE; i++)
	{
		for (int j = 0; j < constants::MATRIX_SIZE; j++)
		{
			invertedMatrix[i][j] /= determinant;
		}
	}
}

void InvertMatrix(const matrix& sourceMatrix, matrix& invertedMatrix)
{
	// ÓÔÂ‰ÂÎËÚÂÎ¸ = 0 - ËÌ‚ÂÚËÓ‚‡ÌÌ‡ˇ Ï. ÌÂ ÒÛ˘.
	float determinant = Get3x3MatrixDetermanant(sourceMatrix);
	if (determinant == 0)
	{
		throw exception("The inverse matrix does not exist, because the determinant = 0");
	}
	// Ú‡ÌÒÔÓÌËÛ˛
	TransposeMatrix3x3(invertedMatrix);
	// Ì‡ıÓÊÛ Ï‡ÚËˆÛ ‡Î„Â·‡Ë˜ÂÒÍËı ‰ÓÔÓÎÌÂÌËÈ (ÍÓÙ‡ÍÚÓÓ‚)
	GetAdjointMatrix3x3(sourceMatrix, invertedMatrix);
	// Ì‡¯ÂÎ ÔËÒÓÂ‰ËÌÂÌÌÛ˛ Ï‡ÚËˆÛ adj

	// ‰ÂÎËÏ Í‡Ê‰˚È ˝ÎÂÏ ÔËÒÓÂ‰. Ï‡ÚËˆ˚ Ì‡ ÓÔÂ‰ÂÎËÚÂÎ¸
	DivideMatrix3x3ByDeterminant(invertedMatrix, determinant);
}

int main(int argc, char* argv[])
{
	if (argc != 2)
	{
		cout << "Invalid arguments count\n"
			<< "Usage: invert.exe <matrix file1>\n";
		return 1;
	}
	
	if (any_of(&argv[1], &argv[2], [](char* arg) {
		return strlen(arg) == 0;
	}))
	{
		cout << "Arguments <input file> must be non empty!";
		return 1;
	}

	ifstream inputFile(argv[1]);
	if (!inputFile.is_open())
	{
		cout << "Failed to open " << argv[1] << " for reading" << endl;
		return 1;
	}
	
	try
	{
		matrix sourceMatrix;
		ReadMatrix(inputFile, sourceMatrix);

		matrix invertedMatrix;
		InvertMatrix(sourceMatrix, invertedMatrix);

		PrintMatrix(sourceMatrix);
		PrintMatrix(invertedMatrix);
	}
	catch (exception const& error)
	{
		cout << error.what() << endl;
		return 1;
	}




    return 0;
}

